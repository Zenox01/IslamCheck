{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Hp\\\\Desktop\\\\IslamCheck\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Desktop\\\\IslamCheck\\\\src\\\\DetailMain.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport Info from \"./Setting-SurahInfopage\";\nimport Reading from \"./Settings-Reading.js\";\nimport Body from \"./DetailVersesFetcher\";\nimport { useParams } from \"react-router-dom\"; //----------------\n\nimport { SurahContext, CurrentPageContext, LastPageContext, endFlagContext, OffsetContext, ChosenVerseAndPageContext, ChosenVerseFlagContext, LoadingContext, CheckedContext, ReciterContext, BismillahContext, URLContext, VERSESCONTEXT, TranslationsLoaderContext, InfoContext, ReadingContext, ReciterLoadingContext, LangContext } from \"./Store\";\n\nfunction Main(props) {\n  const _useContext = useContext(InfoContext),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        Status = _useContext2[0];\n\n  const _useContext3 = useContext(ReadingContext),\n        _useContext4 = _slicedToArray(_useContext3, 1),\n        ReadStatus = _useContext4[0]; //------------------------------------------------------------------------\n\n\n  const _useContext5 = useContext(LangContext),\n        _useContext6 = _slicedToArray(_useContext5, 2),\n        Lang = _useContext6[0],\n        setLang = _useContext6[1];\n\n  const _useContext7 = useContext(VERSESCONTEXT),\n        _useContext8 = _slicedToArray(_useContext7, 2),\n        Verses = _useContext8[0],\n        setVerses = _useContext8[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        VersesAudio = _useState2[0],\n        setVersesAudio = _useState2[1];\n\n  const _useContext9 = useContext(endFlagContext),\n        _useContext10 = _slicedToArray(_useContext9, 2),\n        endFlag = _useContext10[0],\n        setFlag = _useContext10[1];\n\n  const _useContext11 = useContext(SurahContext),\n        _useContext12 = _slicedToArray(_useContext11, 1),\n        SurahNo = _useContext12[0];\n\n  const _useContext13 = useContext(CurrentPageContext),\n        _useContext14 = _slicedToArray(_useContext13, 2),\n        Currentpage = _useContext14[0],\n        setCurrentPage = _useContext14[1];\n\n  const _useContext15 = useContext(LastPageContext),\n        _useContext16 = _slicedToArray(_useContext15, 2),\n        lastPage = _useContext16[0],\n        setLast = _useContext16[1];\n\n  const _useContext17 = useContext(ReciterLoadingContext),\n        _useContext18 = _slicedToArray(_useContext17, 2),\n        ReciterLoading = _useContext18[0],\n        setReciterLoading = _useContext18[1]; //Verse Dropdown contexts\n\n\n  const _useContext19 = useContext(ChosenVerseAndPageContext),\n        _useContext20 = _slicedToArray(_useContext19, 2),\n        OffsetandPage = _useContext20[0],\n        setPageandOffset = _useContext20[1];\n\n  const _useContext21 = useContext(ChosenVerseFlagContext),\n        _useContext22 = _slicedToArray(_useContext21, 2),\n        isChosen = _useContext22[0],\n        setChosen = _useContext22[1];\n\n  const _useContext23 = useContext(OffsetContext),\n        _useContext24 = _slicedToArray(_useContext23, 2),\n        off = _useContext24[0],\n        setOff = _useContext24[1]; //For Translations...................\n\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Translations = _useState4[0],\n        setTranslations = _useState4[1]; //Loading COntext\n\n\n  const _useContext25 = useContext(LoadingContext),\n        _useContext26 = _slicedToArray(_useContext25, 2),\n        isLoading = _useContext26[0],\n        setLoading = _useContext26[1];\n\n  const _useContext27 = useContext(CheckedContext),\n        _useContext28 = _slicedToArray(_useContext27, 2),\n        check = _useContext28[0],\n        setChecked = _useContext28[1];\n\n  const _useContext29 = useContext(ReciterContext),\n        _useContext30 = _slicedToArray(_useContext29, 2),\n        ActiveReciter = _useContext30[0],\n        setActive = _useContext30[1]; //----------------------\n\n\n  const _useContext31 = useContext(BismillahContext),\n        _useContext32 = _slicedToArray(_useContext31, 2),\n        Bism = _useContext32[0],\n        setBism = _useContext32[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        VersesPack = _useState6[0],\n        setVersesPack = _useState6[1];\n\n  const _useContext33 = useContext(URLContext),\n        _useContext34 = _slicedToArray(_useContext33, 2),\n        URL = _useContext34[0],\n        setURL = _useContext34[1];\n\n  const _useContext35 = useContext(TranslationsLoaderContext),\n        _useContext36 = _slicedToArray(_useContext35, 2),\n        miniLoader = _useContext36[0],\n        setMiniLoader = _useContext36[1];\n\n  var AfterHash = window.location.href.substring(window.location.href.indexOf(\"/#/\") + 3, window.location.href.length);\n  useEffect(() => {\n    var result = [];\n    var TransTemp = [];\n    var count = 0;\n    setBism(true);\n\n    if (SurahNo == 1 || SurahNo == 9) {\n      setBism(false);\n    }\n\n    const fetchData = async () => {\n      if (isChosen || Currentpage === 1) {\n        //|| isChecked\n        setFlag(true); //Has More flag setter for Inifinite Scroller...\n\n        setChosen(false); //Flag for Verse Dropdown\n        //setCheckedFlag(false)\n\n        fetch(\"\".concat(URL, \"chapters/\").concat(SurahNo, \"/verses?language=\").concat(Lang, \"&recitation=\").concat(ActiveReciter, \"&page=\").concat(Currentpage, \"&offset=\").concat(off).concat(Object.keys(check).map(function (prop, index) {\n          if (check[prop] === true) return \"&translations[]=\".concat(prop);\n        }).join(''))).then(res => res.json()).then(dat => {\n          setVersesPack(dat.verses);\n          setVerses(dat.verses.data);\n          setVersesAudio(dat.audio_files);\n          setLast(dat.verses.last_page);\n          setLoading(false);\n          setMiniLoader(false); // setReciterLoading(false)\n        });\n      } else {\n        fetch(\"\".concat(URL, \"chapters/\").concat(SurahNo, \"/verses?language=\").concat(Lang, \"&recitation=\").concat(ActiveReciter, \"&page=\").concat(Currentpage, \"&offset=\").concat(off).concat(Object.keys(check).map(function (prop, index) {\n          if (check[prop] === true) return \"&translations[]=\".concat(prop);\n        }).join(''))).then(res => res.json()).then(dat => {\n          Array.isArray(Verses) ? result = [...Verses, ...dat.verses.data] : console.log(\"\");\n          setVerses(result);\n          Array.isArray(VersesAudio) ? result = [...VersesAudio, ...dat.audio_files] : console.log(\"\");\n          setVersesAudio(result);\n          setVersesPack(dat.verses);\n          setLoading(false);\n          setMiniLoader(false); // setReciterLoading(false)\n        });\n      }\n    };\n\n    if (SurahNo !== 0) {\n      fetchData();\n    }\n  }, [SurahNo, Currentpage, lastPage, off, check, ActiveReciter]); //,check\n\n  return React.createElement(React.Fragment, null, isLoading || AfterHash != SurahNo ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"wraper_laader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))) : React.createElement(React.Fragment, null, Status && React.createElement(Info, {\n    data: props.info,\n    ChapData: props.ChapData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), ReadStatus ? React.createElement(Reading, {\n    data: Verses,\n    audio: VersesAudio,\n    versespack: VersesPack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }) : React.createElement(Body, {\n    data: Verses,\n    audio: VersesAudio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })));\n}\n\nexport default Main;","map":{"version":3,"sources":["C:\\Users\\Hp\\Desktop\\IslamCheck\\src\\DetailMain.js"],"names":["React","useEffect","useState","useContext","Info","Reading","Body","useParams","SurahContext","CurrentPageContext","LastPageContext","endFlagContext","OffsetContext","ChosenVerseAndPageContext","ChosenVerseFlagContext","LoadingContext","CheckedContext","ReciterContext","BismillahContext","URLContext","VERSESCONTEXT","TranslationsLoaderContext","InfoContext","ReadingContext","ReciterLoadingContext","LangContext","Main","props","Status","ReadStatus","Lang","setLang","Verses","setVerses","VersesAudio","setVersesAudio","endFlag","setFlag","SurahNo","Currentpage","setCurrentPage","lastPage","setLast","ReciterLoading","setReciterLoading","OffsetandPage","setPageandOffset","isChosen","setChosen","off","setOff","Translations","setTranslations","isLoading","setLoading","check","setChecked","ActiveReciter","setActive","Bism","setBism","VersesPack","setVersesPack","URL","setURL","miniLoader","setMiniLoader","AfterHash","window","location","href","substring","indexOf","length","result","TransTemp","count","fetchData","fetch","Object","keys","map","prop","index","join","then","res","json","dat","verses","data","audio_files","last_page","Array","isArray","console","log","info","ChapData"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SACIC,SADJ,QAES,kBAFT,C,CAIA;;AACA,SACIC,YADJ,EACkBC,kBADlB,EACsCC,eADtC,EACuDC,cADvD,EAEIC,aAFJ,EAEmBC,yBAFnB,EAE8CC,sBAF9C,EAEsEC,cAFtE,EAEsFC,cAFtF,EAEsGC,cAFtG,EAGIC,gBAHJ,EAGqBC,UAHrB,EAGgCC,aAHhC,EAG8CC,yBAH9C,EAGwEC,WAHxE,EAGqFC,cAHrF,EAGoGC,qBAHpG,EAG2HC,WAH3H,QAIO,SAJP;;AAOA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA,sBACAxB,UAAU,CAACmB,WAAD,CADV;AAAA;AAAA,QACVM,MADU;;AAAA,uBAEIzB,UAAU,CAACoB,cAAD,CAFd;AAAA;AAAA,QAEVM,UAFU,oBAGrB;;;AAHqB,uBAIO1B,UAAU,CAACsB,WAAD,CAJjB;AAAA;AAAA,QAIVK,IAJU;AAAA,QAIJC,OAJI;;AAAA,uBAKW5B,UAAU,CAACiB,aAAD,CALrB;AAAA;AAAA,QAKVY,MALU;AAAA,QAKFC,SALE;;AAAA,oBAMqB/B,QAAQ,CAAC,EAAD,CAN7B;AAAA;AAAA,QAMVgC,WANU;AAAA,QAMGC,cANH;;AAAA,uBAOUhC,UAAU,CAACQ,cAAD,CAPpB;AAAA;AAAA,QAOVyB,OAPU;AAAA,QAODC,OAPC;;AAAA,wBAQClC,UAAU,CAACK,YAAD,CARX;AAAA;AAAA,QAQV8B,OARU;;AAAA,wBASqBnC,UAAU,CAACM,kBAAD,CAT/B;AAAA;AAAA,QASV8B,WATU;AAAA,QASGC,cATH;;AAAA,wBAUWrC,UAAU,CAACO,eAAD,CAVrB;AAAA;AAAA,QAUV+B,QAVU;AAAA,QAUAC,OAVA;;AAAA,wBAW2BvC,UAAU,CAACqB,qBAAD,CAXrC;AAAA;AAAA,QAWVmB,cAXU;AAAA,QAWMC,iBAXN,qBAYjB;;;AAZiB,wBAayBzC,UAAU,CAACU,yBAAD,CAbnC;AAAA;AAAA,QAaVgC,aAbU;AAAA,QAaKC,gBAbL;;AAAA,wBAca3C,UAAU,CAACW,sBAAD,CAdvB;AAAA;AAAA,QAcViC,QAdU;AAAA,QAcAC,SAdA;;AAAA,wBAeK7C,UAAU,CAACS,aAAD,CAff;AAAA;AAAA,QAeVqC,GAfU;AAAA,QAeLC,MAfK,qBAgBjB;;;AAhBiB,qBAiBuBhD,QAAQ,CAAC,EAAD,CAjB/B;AAAA;AAAA,QAiBViD,YAjBU;AAAA,QAiBIC,eAjBJ,kBAkBjB;;;AAlBiB,wBAoBejD,UAAU,CAACY,cAAD,CApBzB;AAAA;AAAA,QAoBVsC,SApBU;AAAA,QAoBCC,UApBD;;AAAA,wBAqBWnD,UAAU,CAACa,cAAD,CArBrB;AAAA;AAAA,QAqBVuC,KArBU;AAAA,QAqBHC,UArBG;;AAAA,wBAsBkBrD,UAAU,CAACc,cAAD,CAtB5B;AAAA;AAAA,QAsBVwC,aAtBU;AAAA,QAsBKC,SAtBL,qBAuBjB;;;AAvBiB,wBAwBOvD,UAAU,CAACe,gBAAD,CAxBjB;AAAA;AAAA,QAwBVyC,IAxBU;AAAA,QAwBJC,OAxBI;;AAAA,qBA0BmB1D,QAAQ,CAAC,EAAD,CA1B3B;AAAA;AAAA,QA0BV2D,UA1BU;AAAA,QA0BEC,aA1BF;;AAAA,wBA4BI3D,UAAU,CAACgB,UAAD,CA5Bd;AAAA;AAAA,QA4BV4C,GA5BU;AAAA,QA4BNC,MA5BM;;AAAA,wBA6BiB7D,UAAU,CAACkB,yBAAD,CA7B3B;AAAA;AAAA,QA6BV4C,UA7BU;AAAA,QA6BCC,aA7BD;;AA+BjB,MAAIC,SAAS,GAACC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+BH,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBE,OAArB,CAA6B,KAA7B,IAAsC,CAArE,EAAwEJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBG,MAA7F,CAAd;AAGAxE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIyE,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,KAAK,GAAG,CAAZ;AACAhB,IAAAA,OAAO,CAAC,IAAD,CAAP;;AACA,QAAItB,OAAO,IAAI,CAAX,IAAgBA,OAAO,IAAI,CAA/B,EAAkC;AAE9BsB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AACD,UAAMiB,SAAS,GAAG,YAAY;AAG1B,UAAI9B,QAAQ,IAAIR,WAAW,KAAK,CAAhC,EAAmC;AAAE;AACjCF,QAAAA,OAAO,CAAC,IAAD,CAAP,CAD+B,CACjB;;AACdW,QAAAA,SAAS,CAAC,KAAD,CAAT,CAF+B,CAEb;AAClB;;AAIA8B,QAAAA,KAAK,WAAIf,GAAJ,sBAAmBzB,OAAnB,8BAA8CR,IAA9C,yBAAiE2B,aAAjE,mBAAuFlB,WAAvF,qBAA6GU,GAA7G,SAAmH8B,MAAM,CAACC,IAAP,CAAYzB,KAAZ,EAAmB0B,GAAnB,CAAuB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClK,cAAI5B,KAAK,CAAC2B,IAAD,CAAL,KAAgB,IAApB,EACI,iCAA0BA,IAA1B;AACP,SAHuH,EAGrHE,IAHqH,CAGhH,EAHgH,CAAnH,EAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKUG,GAAG,IAAI;AAGT1B,UAAAA,aAAa,CAAC0B,GAAG,CAACC,MAAL,CAAb;AACAxD,UAAAA,SAAS,CAACuD,GAAG,CAACC,MAAJ,CAAWC,IAAZ,CAAT;AACAvD,UAAAA,cAAc,CAACqD,GAAG,CAACG,WAAL,CAAd;AACAjD,UAAAA,OAAO,CAAC8C,GAAG,CAACC,MAAJ,CAAWG,SAAZ,CAAP;AACAtC,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAY,UAAAA,aAAa,CAAC,KAAD,CAAb,CARS,CAST;AAEH,SAhBL;AAkBH,OAzBD,MA0BK;AAGDY,QAAAA,KAAK,WAAIf,GAAJ,sBAAmBzB,OAAnB,8BAA8CR,IAA9C,yBAAiE2B,aAAjE,mBAAuFlB,WAAvF,qBAA6GU,GAA7G,SAAmH8B,MAAM,CAACC,IAAP,CAAYzB,KAAZ,EAAmB0B,GAAnB,CAAuB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClK,cAAI5B,KAAK,CAAC2B,IAAD,CAAL,KAAgB,IAApB,EACI,iCAA0BA,IAA1B;AACP,SAHuH,EAGrHE,IAHqH,CAGhH,EAHgH,CAAnH,EAAL,CAIKC,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKUG,GAAG,IAAI;AAETK,UAAAA,KAAK,CAACC,OAAN,CAAc9D,MAAd,IAAwB0C,MAAM,GAAG,CAAC,GAAG1C,MAAJ,EAAY,GAAGwD,GAAG,CAACC,MAAJ,CAAWC,IAA1B,CAAjC,GACIK,OAAO,CAACC,GAAR,CAAY,EAAZ,CADJ;AAEA/D,UAAAA,SAAS,CAACyC,MAAD,CAAT;AAGAmB,UAAAA,KAAK,CAACC,OAAN,CAAc5D,WAAd,IAA6BwC,MAAM,GAAG,CAAC,GAAGxC,WAAJ,EAAiB,GAAGsD,GAAG,CAACG,WAAxB,CAAtC,GAA6EI,OAAO,CAACC,GAAR,CAAY,EAAZ,CAA7E;AAGA7D,UAAAA,cAAc,CAACuC,MAAD,CAAd;AACAZ,UAAAA,aAAa,CAAC0B,GAAG,CAACC,MAAL,CAAb;AACAnC,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAY,UAAAA,aAAa,CAAC,KAAD,CAAb,CAbS,CAcT;AAGH,SAtBL;AAwBH;AAED,KA1DJ;;AA2DG,QAAG5B,OAAO,KAAG,CAAb,EACH;AACIuC,MAAAA,SAAS;AACZ;AAEJ,GAzEQ,EAyEN,CAACvC,OAAD,EAAUC,WAAV,EAAuBE,QAAvB,EAAiCQ,GAAjC,EAAsCM,KAAtC,EAA6CE,aAA7C,CAzEM,CAAT,CAlCiB,CA2G+C;;AAIhE,SACI,0CAEMJ,SAAS,IAAKc,SAAS,IAAG7B,OAA3B,GAAsC,0CAC/B;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAD+B,CAAtC,GAOG,0CACGV,MAAM,IAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAED,KAAK,CAACsE,IAAlB;AAAwB,IAAA,QAAQ,EAAEtE,KAAK,CAACuE,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADb,EAIMrE,UAAD,GAAe,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEG,MAAf;AAAuB,IAAA,KAAK,EAAEE,WAA9B;AAA2C,IAAA,UAAU,EAAE2B,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf,GACG,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE7B,MAAZ;AAAoB,IAAA,KAAK,EAAEE,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CATR,CADJ;AAyBH;;AAED,eAAeR,IAAf","sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\r\nimport Info from \"./Setting-SurahInfopage\";\r\nimport Reading from \"./Settings-Reading.js\";\r\nimport Body from \"./DetailVersesFetcher\";\r\nimport {\r\n    useParams\r\n  } from \"react-router-dom\";\r\n  \r\n//----------------\r\nimport {\r\n    SurahContext, CurrentPageContext, LastPageContext, endFlagContext,\r\n    OffsetContext, ChosenVerseAndPageContext, ChosenVerseFlagContext, LoadingContext, CheckedContext, ReciterContext,\r\n    BismillahContext,URLContext,VERSESCONTEXT,TranslationsLoaderContext,InfoContext, ReadingContext,ReciterLoadingContext, LangContext\r\n} from \"./Store\";\r\n\r\n\r\nfunction Main(props) {\r\n    const [Status] = useContext(InfoContext);\r\n    const [ReadStatus] = useContext(ReadingContext);\r\n//------------------------------------------------------------------------\r\n    const [Lang, setLang] = useContext(LangContext);\r\n    const [Verses, setVerses] = useContext(VERSESCONTEXT);\r\n    const [VersesAudio, setVersesAudio] = useState([]);\r\n    const [endFlag, setFlag] = useContext(endFlagContext);\r\n    const [SurahNo] = useContext(SurahContext);\r\n    const [Currentpage, setCurrentPage] = useContext(CurrentPageContext);\r\n    const [lastPage, setLast] = useContext(LastPageContext);\r\n    const [ReciterLoading, setReciterLoading] = useContext(ReciterLoadingContext);\r\n    //Verse Dropdown contexts\r\n    const [OffsetandPage, setPageandOffset] = useContext(ChosenVerseAndPageContext);\r\n    const [isChosen, setChosen] = useContext(ChosenVerseFlagContext);\r\n    const [off, setOff] = useContext(OffsetContext);\r\n    //For Translations...................\r\n    const [Translations, setTranslations] = useState([]);\r\n    //Loading COntext\r\n\r\n    const [isLoading, setLoading] = useContext(LoadingContext);\r\n    const [check, setChecked] = useContext(CheckedContext);\r\n    const [ActiveReciter, setActive] = useContext(ReciterContext)\r\n    //----------------------\r\n    const [Bism, setBism] = useContext(BismillahContext);\r\n\r\n    const [VersesPack, setVersesPack] = useState([]);\r\n\r\n    const [URL,setURL] = useContext(URLContext);\r\n    const [miniLoader,setMiniLoader]= useContext(TranslationsLoaderContext);\r\n    \r\n    var AfterHash=window.location.href.substring(window.location.href.indexOf(\"/#/\") + 3, window.location.href.length);\r\n\r\n\r\n    useEffect(() => {\r\n        var result = [];\r\n        var TransTemp = [];\r\n        var count = 0;\r\n        setBism(true);\r\n        if (SurahNo == 1 || SurahNo == 9) { \r\n             \r\n            setBism(false);\r\n        }\r\n        const fetchData = async () => {\r\n\r\n        \r\n            if (isChosen || Currentpage === 1) { //|| isChecked\r\n                setFlag(true);//Has More flag setter for Inifinite Scroller...\r\n                setChosen(false); //Flag for Verse Dropdown\r\n                //setCheckedFlag(false)\r\n         \r\n\r\n\r\n                fetch(`${URL}chapters/${SurahNo}/verses?language=${Lang}&recitation=${ActiveReciter}&page=${Currentpage}&offset=${off}${Object.keys(check).map(function (prop, index) {\r\n                    if (check[prop] === true)\r\n                        return `&translations[]=${prop}`\r\n                }).join('')}`)\r\n                    .then(res => res.json())\r\n                    .then(dat => {\r\n\r\n\r\n                        setVersesPack(dat.verses);\r\n                        setVerses(dat.verses.data);\r\n                        setVersesAudio(dat.audio_files);\r\n                        setLast(dat.verses.last_page);\r\n                        setLoading(false)\r\n                        setMiniLoader(false)\r\n                        // setReciterLoading(false)\r\n                        \r\n                    });\r\n\r\n            }\r\n            else {\r\n\r\n\r\n                fetch(`${URL}chapters/${SurahNo}/verses?language=${Lang}&recitation=${ActiveReciter}&page=${Currentpage}&offset=${off}${Object.keys(check).map(function (prop, index) {\r\n                    if (check[prop] === true)\r\n                        return `&translations[]=${prop}`\r\n                }).join('')}`)\r\n                    .then(res => res.json())\r\n                    .then(dat => {\r\n\r\n                        Array.isArray(Verses) ? result = [...Verses, ...dat.verses.data] :\r\n                            console.log(\"\");\r\n                        setVerses(result);\r\n\r\n\r\n                        Array.isArray(VersesAudio) ? result = [...VersesAudio, ...dat.audio_files] : console.log(\"\")\r\n                            \r\n\r\n                        setVersesAudio(result);\r\n                        setVersesPack(dat.verses);\r\n                        setLoading(false);\r\n                        setMiniLoader(false);\r\n                        // setReciterLoading(false)\r\n                        \r\n\r\n                    });\r\n\r\n            }\r\n\r\n           }\r\n           if(SurahNo!==0)\r\n        {\r\n            fetchData();\r\n        }\r\n\r\n    }, [SurahNo, Currentpage, lastPage, off, check, ActiveReciter]);//,check\r\n\r\n\r\n    \r\n    return (\r\n        <>\r\n          \r\n            {(isLoading ||  AfterHash!= SurahNo) ? <>\r\n                    <div className=\"wraper_laader\">\r\n                        <div className=\"loader\"></div>\r\n                    </div>\r\n                   \r\n                </>\r\n                :\r\n                <>\r\n                  {Status && <Info data={props.info} ChapData={props.ChapData}/>}\r\n                 \r\n\r\n                    {(ReadStatus) ? <Reading data={Verses} audio={VersesAudio} versespack={VersesPack}/> :\r\n                        <Body data={Verses} audio={VersesAudio}/>}\r\n                 \r\n                </>\r\n\r\n            }\r\n        </>\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}